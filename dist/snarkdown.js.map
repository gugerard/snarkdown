{"version":3,"sources":["../src/index.js"],"names":["outdent","str","replace","RegExp","match","encodeAttr","parse","md","prevLinks","tag","token","desc","TAGS","end","context","length","flush","let","chunk","prev","inner","t","tokenizer","out","links","last","s","name","url","toLowerCase","exec","substring","index","lastIndex","trim","const","","_","\n"," ","-"],"mappings":"AAWA,QAASA,GAAQC,GAChB,MAAOA,GAAIC,QAAQC,OAAO,KAAKF,EAAIG,MAAM,aAAe,IAAI,GAAI,MAAO,IAMxE,QAASC,GAAWJ,GACnB,OAAQA,EAAI,IAAIC,QAAQ,KAAM,UAAUA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,QAI7E,QAAwBI,GAAMC,EAAIC,GAQjC,QAASC,GAAIC,GACZ,GAAIC,GAAOC,EAAKF,EAAMR,QAAQ,MAAM,KAAK,IAAM,IAC9CW,EAAMC,EAAQA,EAAQC,OAAO,IAAIL,CAClC,OAAKC,GACAA,EAAK,IACVG,EAAQD,EAAI,MAAM,QAAQH,GACnBC,EAAS,EAAJE,IAFSF,EAAK,GADRD,EAMnB,QAASM,KAER,IADAC,GAAIhB,GAAM,GACHa,EAAQC,QAAQd,GAAOQ,EAAIK,EAAQA,EAAQC,OAAO,GACzD,OAAOd,GAnBRgB,GAKCC,GAAOC,EAAMT,EAAOU,EAAOC,EALxBC,EAAY,iVACfR,KACAS,EAAM,GACNC,EAAQhB,MACRiB,EAAO,CAuBR,KALAlB,EAAKA,EAAGL,QAAQ,wBAAyB,SAACwB,EAAGC,EAAMC,GAElD,MADAJ,GAAMG,EAAKE,eAAiBD,EACrB,KACL1B,QAAQ,aAAc,IAEhBQ,EAAMY,EAAUQ,KAAKvB,IAC7BY,EAAOZ,EAAGwB,UAAUN,EAAMf,EAAMsB,OAChCP,EAAOH,EAAUW,UACjBf,EAAQR,EAAM,GACVS,EAAKf,MAAM,qBAINM,EAAM,IAAMA,EAAM,GAC1BQ,EAAQ,qBAAqBR,EAAM,GAAG,SAASA,EAAM,GAAGmB,eAAe,KAAK7B,EAAQK,EAAWK,EAAM,IAAMA,EAAM,IAAIR,QAAQ,aAAc,KAAK,SAGxIQ,EAAM,IACdW,EAAIX,EAAM,GACNW,EAAEjB,MAAM,QACXM,EAAM,GAAKA,EAAM,GAAGR,QAAQ,SAAU,KAEvCkB,EAAQd,EAAMN,EAAQU,EAAM,GAAGR,QAAQ,gBAAiB,MAChD,MAAJmB,EAASA,EAAI,cAEhBA,EAAIA,EAAEjB,MAAM,MAAQ,KAAO,KAC3BgB,EAAQA,EAAMlB,QAAQ,gBAAiB,gBAExCgB,EAAQ,IAAIG,EAAE,IAAMD,EAAQ,KAAKC,EAAE,KAG3BX,EAAM,GACdQ,EAAQ,aAAab,EAAWK,EAAM,IAAG,UAAUL,EAAWK,EAAM,IAAG,KAG/DA,EAAM,KACda,EAAMA,EAAIrB,QAAQ,MAAO,YAAYG,EAAWK,EAAM,KAAOc,EAAML,EAAKU,gBAAe,MACvFX,EAAQF,IAAU,QAEVN,EAAM,GACdQ,EAAQ,MAGAR,EAAM,KAAOA,EAAM,KAC3BW,EAAI,KAAOX,EAAM,IAAMA,EAAM,IAAIK,OAAyB,MAAfL,EAAM,IAAI,GAAS,EAAE,GAChEQ,EAAQ,IAAIG,EAAE,IAAMf,EAAMI,EAAM,KAAOA,EAAM,IAAKc,GAAS,KAAKH,EAAE,KAG1DX,EAAM,IACdQ,EAAQ,SAASb,EAAWK,EAAM,KAAK,WAG/BA,EAAM,KAAOA,EAAM,MAC3BQ,EAAQT,EAAIC,EAAM,KAAO,QAE1Ba,GAAOJ,EACPI,GAAOL,CAGR,QAAQK,EAAMhB,EAAGwB,UAAUN,GAAQT,KAASkB,OAzG7CC,GAAMvB,IACLwB,IAAM,OAAO,SACbC,GAAK,WAAW,aAChBC,MAAQ,UACRC,KAAO,UACPC,KAAM","file":"snarkdown.js","sourcesContent":["const TAGS = {\n\t'' : ['<em>','</em>'],\n\t_ : ['<strong>','</strong>'],\n\t'\\n' : ['<br />'],\n\t' ' : ['<br />'],\n\t'-': ['<hr />']\n};\n\n/** Outdent a string based on the first indented line's leading whitespace\n *\t@private\n */\nfunction outdent(str) {\n\treturn str.replace(RegExp('^'+(str.match(/^(\\t| )+/) || '')[0], 'gm'), '');\n}\n\n/** Encode special attribute characters to HTML entities in a String.\n *\t@private\n */\nfunction encodeAttr(str) {\n\treturn (str+'').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\n\n/** Parse Markdown into an HTML String. */\nexport default function parse(md, prevLinks) {\n\tlet tokenizer = /((?:^|\\n+)(?:\\n---+|\\* \\*(?: \\*)+)\\n)|(?:^```(\\w*)\\n([\\s\\S]*?)\\n```$)|((?:(?:^|\\n+)(?:\\t|  {2,}).+)+\\n*)|((?:(?:^|\\n)([>*+-]|\\d+\\.)\\s+.*)+)|(?:\\!\\[([^\\]]*?)\\]\\(([^\\)]+?)\\))|(\\[)|(\\](?:\\(([^\\)]+?)\\))?)|(?:(?:^|\\n+)([^\\s].*)\\n(\\-{3,}|={3,})(?:\\n+|$))|(?:(?:^|\\n+)(#{1,3})\\s*(.+)(?:\\n+|$))|(?:`([^`].*?)`)|(  \\n\\n*|\\n{2,}|__|\\*\\*|[_*])/gm,\n\t\tcontext = [],\n\t\tout = '',\n\t\tlinks = prevLinks || {},\n\t\tlast = 0,\n\t\tchunk, prev, token, inner, t;\n\n\tfunction tag(token) {\n\t\tvar desc = TAGS[token.replace(/\\*/g,'_')[1] || ''],\n\t\t\tend = context[context.length-1]==token;\n\t\tif (!desc) return token;\n\t\tif (!desc[1]) return desc[0];\n\t\tcontext[end?'pop':'push'](token);\n\t\treturn desc[end|0];\n\t}\n\n\tfunction flush() {\n\t\tlet str = '';\n\t\twhile (context.length) str += tag(context[context.length-1]);\n\t\treturn str;\n\t}\n\n\tmd = md.replace(/^\\[(.+?)\\]:\\s*(.+)$/gm, (s, name, url) => {\n\t\tlinks[name.toLowerCase()] = url;\n\t\treturn '';\n\t}).replace(/^\\n+|\\n+$/g, '');\n\n\twhile ( (token=tokenizer.exec(md)) ) {\n\t\tprev = md.substring(last, token.index);\n\t\tlast = tokenizer.lastIndex;\n\t\tchunk = token[0];\n\t\tif (prev.match(/[^\\\\](\\\\\\\\)*\\\\$/)) {\n\t\t\t// escaped\n\t\t}\n\t\t// Code/Indent blocks:\n\t\telse if (token[3] || token[4]) {\n\t\t\tchunk = '<pre class=\"code '+(token[4]?'poetry':token[2].toLowerCase())+'\">'+outdent(encodeAttr(token[3] || token[4]).replace(/^\\n+|\\n+$/g, ''))+'</pre>';\n\t\t}\n\t\t// > Quotes, -* lists:\n\t\telse if (token[6]) {\n\t\t\tt = token[6];\n\t\t\tif (t.match(/\\./)) {\n\t\t\t\ttoken[5] = token[5].replace(/^\\d+/gm, '');\n\t\t\t}\n\t\t\tinner = parse(outdent(token[5].replace(/^\\s*[>*+.-]/gm, '')));\n\t\t\tif (t==='>') t = 'blockquote';\n\t\t\telse {\n\t\t\t\tt = t.match(/\\./) ? 'ol' : 'ul';\n\t\t\t\tinner = inner.replace(/^(.*)(\\n|$)/gm, '<li>$1</li>');\n\t\t\t}\n\t\t\tchunk = '<'+t+'>' + inner + '</'+t+'>';\n\t\t}\n\t\t// Images:\n\t\telse if (token[8]) {\n\t\t\tchunk = `<img src=\"${encodeAttr(token[8])}\" alt=\"${encodeAttr(token[7])}\">`;\n\t\t}\n\t\t// Links:\n\t\telse if (token[10]) {\n\t\t\tout = out.replace('<a>', `<a href=\"${encodeAttr(token[11] || links[prev.toLowerCase()])}\">`);\n\t\t\tchunk = flush() + '</a>';\n\t\t}\n\t\telse if (token[9]) {\n\t\t\tchunk = '<a>';\n\t\t}\n\t\t// Headings:\n\t\telse if (token[12] || token[14]) {\n\t\t\tt = 'h' + (token[14] ? token[14].length : (token[13][0]==='='?1:2));\n\t\t\tchunk = '<'+t+'>' + parse(token[12] || token[15], links) + '</'+t+'>';\n\t\t}\n\t\t// `code`:\n\t\telse if (token[16]) {\n\t\t\tchunk = '<code>'+encodeAttr(token[16])+'</code>';\n\t\t}\n\t\t// Inline formatting: *em*, **strong** & friends\n\t\telse if (token[17] || token[1]) {\n\t\t\tchunk = tag(token[17] || '--');\n\t\t}\n\t\tout += prev;\n\t\tout += chunk;\n\t}\n\n\treturn (out + md.substring(last) + flush()).trim();\n}\n"]}